 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongodb = require("mongodb");
var dbUrl = "mongodb://fcc:123456@ds261247.mlab.com:61247/fcc";
var dbClient;
var fccDB;
var shortUrlCollection;
mongodb.connect(dbUrl, function(err, db){
  if (err) throw err;
    //dbClient = client;  
    //fccDB = dbClient.db("fcc");
    fccDB = db;
    shortUrlCollection = fccDB.collection("shortUrl");
});



if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

function getUrlShortKey(url){
  return new Promise(function(resolve, reject){    
    if (shortUrlCollection){    
      shortUrlCollection.find({original_url:url}).toArray(function(err, documents){
        if(err) throw err;
        console.log(documents);   
        var shortKey;
        if (documents.length>0){
          shortKey = documents[0].short_key;
          resolve(documents[0].short_key);
        }else{
          var newRecord = {
            short_key:1,
            original_url:url
          }
          shortUrlCollection.aggregate([{$group:{_id:"1",max_short_key:{$max:"$short_key"}}}]).toArray(function(err, documents){
            if(err) throw err;
            console.log(documents);
            if (documents.length>0){
              newRecord.short_key=documents[0].max_short_key+1;
            }
            shortUrlCollection.insert(newRecord, function(err, documents){
              console.log(err,documents);
              resolve(newRecord.short_key);
            });
          });
        }
      });
    }else{
      reject("db error");
    }
  });
};

function getOriginalUrl(shortKey){
  return new Promise(function(resolve, reject){    
    if (shortUrlCollection){    
      shortUrlCollection.find({short_key:shortKey}).toArray(function(err, documents){
        if(err) throw err;
        console.log(documents);   
        if (documents.length>0){
          resolve(documents[0].original_url);
        }else{
          reject("record not found");
        }
      });
    }else{
      reject("db error");
    }
  });
};

app.route(/^\/shortenurl\/(.*)/)
    .get(function(req, res) {
      res.setHeader('Content-Type', 'application/json');
      var url = req.params[0];
      console.log("url:"+url);
      if(!url || !/^https?:\/\/.+$/.test(url)){ //FIXME: more strict check if needed       
		    res.end(JSON.stringify({error:"url wrong format"}));
      }else{
        var shortUrlBase = "https://far-salesman.glitch.me/";
        var ret={
          "original_url":url,
          "short_url": null
        };
        
        getUrlShortKey(url).then(function(shortKey){          
          ret.short_url = shortUrlBase+ shortKey;
          res.end(JSON.stringify(ret));
        });
      }
    });

app.route("/:short_url")
    .get(function(req, res) {
      var short_url = req.params.short_url;
      console.log("short_url:"+short_url);
      if(!short_url|| !parseInt(short_url)){        
		    res.end(JSON.stringify({error:"short_url wrong format"}));
      }else{
        var shortKey = parseInt(short_url);
        getOriginalUrl(shortKey).then(function(url){
          res.redirect(url);
        }).catch(function(err){
          res.end(err);
        });
      }
    });

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

